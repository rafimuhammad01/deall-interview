// Code generated by mockery v2.9.6. DO NOT EDIT.

package mocks

import (
	domain "github.com/rafimuhammad01/auth-service/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// GetByUsername provides a mock function with given fields: username
func (_m *UserRepository) GetByUsername(username string) (*domain.User, []error) {
	ret := _m.Called(username)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 []error
	if rf, ok := ret.Get(1).(func(string) []error); ok {
		r1 = rf(username)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]error)
		}
	}

	return r0, r1
}

// GetUserDataFromToken provides a mock function with given fields: refreshToken
func (_m *UserRepository) GetUserDataFromToken(refreshToken string) (map[string]interface{}, []error) {
	ret := _m.Called(refreshToken)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 []error
	if rf, ok := ret.Get(1).(func(string) []error); ok {
		r1 = rf(refreshToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]error)
		}
	}

	return r0, r1
}

// SaveToken provides a mock function with given fields: userid, role, refreshToken
func (_m *UserRepository) SaveToken(userid string, role int, refreshToken string) []error {
	ret := _m.Called(userid, role, refreshToken)

	var r0 []error
	if rf, ok := ret.Get(0).(func(string, int, string) []error); ok {
		r0 = rf(userid, role, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
