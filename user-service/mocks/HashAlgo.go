// Code generated by mockery v2.9.6. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// HashAlgo is an autogenerated mock type for the HashAlgo type
type HashAlgo struct {
	mock.Mock
}

// Hash provides a mock function with given fields: password, cost
func (_m *HashAlgo) Hash(password string, cost int) (string, []error) {
	ret := _m.Called(password, cost)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int) string); ok {
		r0 = rf(password, cost)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 []error
	if rf, ok := ret.Get(1).(func(string, int) []error); ok {
		r1 = rf(password, cost)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]error)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewHashAlgo interface {
	mock.TestingT
	Cleanup(func())
}

// NewHashAlgo creates a new instance of HashAlgo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHashAlgo(t mockConstructorTestingTNewHashAlgo) *HashAlgo {
	mock := &HashAlgo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
